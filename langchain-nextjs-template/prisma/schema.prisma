generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextIndex"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id             String          @id @default(uuid())
    email          String          @unique
    name           String?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    chats          Chat[]
    costLogs       CostLog[]
    events         Event[]
    medicalReports MedicalReport[]
    sessions       Session[]

    @@map("users")
}

model Session {
    id              String           @id @default(uuid())
    userId          String
    title           String?
    description     String?
    metadata        Json?
    isActive        Boolean          @default(true)
    sessionSummary  String?
    tags            String[]
    category        SessionCategory?
    vectorId        String?
    messageCount    Int              @default(0)
    totalTokens     Int              @default(0)
    totalCost       Decimal          @default(0) @db.Decimal(10, 8)
    lastActivityAt  DateTime         @default(now())
    durationMinutes Int?
    status          SessionStatus    @default(ACTIVE)
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    chats           Chat[]
    events          Event[]
    sessionFiles    SessionFile[]
    sessionLogs     SessionLog[]
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([isActive])
    @@index([status])
    @@index([category])
    @@index([lastActivityAt])
    @@index([tags])
    @@map("sessions")
}

model Chat {
    id                String      @id @default(uuid())
    sessionId         String
    userId            String
    role              MessageRole
    content           String
    metadata          Json?
    isHealthcareQuery Boolean     @default(false)
    citations         Json?
    confidence        Float?
    createdAt         DateTime    @default(now())
    session           Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    costLogs          CostLog[]

    @@index([sessionId])
    @@index([userId])
    @@index([role])
    @@index([isHealthcareQuery])
    @@map("chats")
}

model MedicalReport {
    id               String           @id @default(uuid())
    userId           String
    fileName         String
    fileType         String
    fileSize         Int
    originalPath     String?
    extractedText    String
    summary          String?
    reportType       ReportType?
    vectorId         String?
    processingStatus ProcessingStatus @default(PENDING)
    medicalTags      String[]
    patientInfo      Json?
    metadata         Json?
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentChunks   DocumentChunk[]  @relation("MedicalReportChunks")

    @@index([userId])
    @@index([reportType])
    @@index([processingStatus])
    @@map("medical_reports")
}

model CostLog {
    id            String    @id @default(uuid())
    userId        String
    chatId        String?
    operation     Operation
    modelProvider String?
    modelName     String?
    inputTokens   Int?
    outputTokens  Int?
    totalTokens   Int?
    costUsd       Decimal   @db.Decimal(10, 8)
    metadata      Json?
    createdAt     DateTime  @default(now())
    chat          Chat?     @relation(fields: [chatId], references: [id], onDelete: SetNull)
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([operation])
    @@index([modelProvider])
    @@index([createdAt])
    @@map("cost_logs")
}

model Event {
    id          String    @id @default(uuid())
    userId      String
    sessionId   String?
    eventType   EventType
    description String?
    severity    Severity  @default(INFO)
    metadata    Json?
    ipAddress   String?
    userAgent   String?
    createdAt   DateTime  @default(now())
    session     Session?  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([eventType])
    @@index([severity])
    @@index([createdAt])
    @@map("events")
}

model MedicalKnowledge {
    id          String    @id @default(uuid())
    title       String
    content     String
    summary     String?
    source      String
    sourceUrl   String?
    pmid        String?
    doi         String?
    category    String
    tags        String[]
    specialty   String?
    vectorId    String?
    trustScore  Float?
    lastUpdated DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([category])
    @@index([source])
    @@index([specialty])
    @@map("medical_knowledge")
}

model SessionLog {
    id           String      @id @default(uuid())
    sessionId    String
    action       String
    description  String?
    metadata     Json?
    severity     LogSeverity @default(INFO)
    responseTime Int?
    tokenCount   Int?
    costUsd      Decimal?    @db.Decimal(10, 8)
    createdAt    DateTime    @default(now())
    session      Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@index([sessionId])
    @@index([action])
    @@index([severity])
    @@index([createdAt])
    @@map("session_logs")
}

model SessionFile {
    id               String               @id @default(uuid())
    sessionId        String
    fileName         String
    fileType         String
    fileSize         Int
    filePath         String?
    originalName     String?
    processingStatus FileProcessingStatus @default(PENDING)
    extractedText    String?
    summary          String?
    tags             String[]
    vectorId         String?
    metadata         Json?
    uploadedAt       DateTime             @default(now())
    session          Session              @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    documentChunks   DocumentChunk[]      @relation("SessionFileChunks")

    @@index([sessionId])
    @@index([fileType])
    @@index([processingStatus])
    @@index([tags])
    @@map("session_files")
}

model DocumentChunk {
    id              String   @id @default(uuid())
    content         String
    startIndex      Int
    endIndex        Int
    tokenCount      Int
    chunkIndex      Int
    semanticSection String?
    metadata        Json
    vectorId        String?
    embeddingModel  String?
    processingCost  Decimal? @db.Decimal(10, 8)
    qualityScore    Float?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Parent document references - a chunk belongs to either a medical report OR session file
    medicalReportId String?
    sessionFileId   String?

    // Relations
    medicalReport MedicalReport? @relation("MedicalReportChunks", fields: [medicalReportId], references: [id], onDelete: Cascade)
    sessionFile   SessionFile?   @relation("SessionFileChunks", fields: [sessionFileId], references: [id], onDelete: Cascade)

    @@index([medicalReportId])
    @@index([sessionFileId])
    @@index([chunkIndex])
    @@index([semanticSection])
    @@index([tokenCount])
    @@index([qualityScore])
    @@map("document_chunks")
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
    FUNCTION
}

enum ReportType {
    LAB_REPORT
    PRESCRIPTION
    DIAGNOSTIC_IMAGE
    MEDICAL_HISTORY
    DISCHARGE_SUMMARY
    CONSULTATION_NOTE
    OTHER
}

enum ProcessingStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    ARCHIVED
}

enum Operation {
    CHAT_COMPLETION
    EMBEDDING_GENERATION
    VECTOR_SEARCH
    WEB_SEARCH
    FILE_PROCESSING
    MODEL_INFERENCE
    API_CALL
    MULTI_MODEL_REASONING
    MEDICAL_ANALYSIS
    CITATION_LOOKUP
}

enum EventType {
    USER_LOGIN
    USER_LOGOUT
    FILE_UPLOAD
    CHAT_START
    CHAT_END
    MEDICAL_QUERY
    SEARCH_PERFORMED
    ERROR_OCCURRED
    SYSTEM_EVENT
}

enum Severity {
    DEBUG
    INFO
    WARNING
    ERROR
    CRITICAL
}

enum SessionCategory {
    MEDICAL_CONSULTATION
    DOCUMENT_ANALYSIS
    GENERAL_CHAT
    RESEARCH
    DIAGNOSTIC_SUPPORT
    TREATMENT_PLANNING
    EDUCATION
    OTHER
}

enum SessionStatus {
    ACTIVE
    PAUSED
    COMPLETED
    ARCHIVED
    DELETED
}

enum LogSeverity {
    DEBUG
    INFO
    WARNING
    ERROR
    CRITICAL
}

enum FileProcessingStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    ARCHIVED
}
